service: api-rekognition-images
frameworkVersion: '2 || 3'

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python3.9
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    IMAGES_BUCKET: 'images-recognition234234zcz3'
    REGION_NAME: 'eu-west-1'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - "arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}"
            - "arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - "rekognition:*"
          Resource: "*"

  apiGateway:
    request:
      schemas:
        post-callback_url:
          name: PostCallbackURL
          schema: ${file(blob_create_request.json)}
          description: "Validation for posts params"

functions:
  createblob:
    handler: src/blobs.createBlob
    events:
      - http:
          method: post
          path: blobs
          request:
            schemas:
              application/json: post-callback_url
      - http:
          path: blobs/{id}
          method: get
          request:
            parameters:
              paths:
                id: true

  processblob:
    handler: src/processBlob.rekognizeImage
    events:
      - s3:
          bucket: ${self:provider.environment.IMAGES_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
  callbackRezult:
    handler: src/blobs.make_callback
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - BlobsTable
              - StreamArn

resources:
  Resources:
    BlobsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: blob_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: blob_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_BUCKET}
